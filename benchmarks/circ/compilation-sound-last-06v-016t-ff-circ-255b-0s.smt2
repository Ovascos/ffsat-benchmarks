(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-logic QF_FFA)
(define-sort FF0 () (_ FiniteField 52435875175126190479447740508185965837690552500527637822603658699938581184513))
(declare-fun b () Bool)
(declare-fun a () Bool)
(declare-fun f () Bool)
(declare-fun d () Bool)
(declare-fun c () Bool)
(declare-fun e () Bool)
(declare-fun return_n3 () FF0)
(declare-fun mul_n23 () FF0)
(declare-fun is_zero_n19 () FF0)
(declare-fun mul_n22 () FF0)
(declare-fun mul_n21 () FF0)
(declare-fun is_zero_n12 () FF0)
(declare-fun mul_n8 () FF0)
(declare-fun mul_n20 () FF0)
(declare-fun b_n4 () FF0)
(declare-fun mul_n10 () FF0)
(declare-fun mul_n14 () FF0)
(declare-fun mul_n15 () FF0)
(declare-fun c_n2 () FF0)
(declare-fun mul_n16 () FF0)
(declare-fun is_zero_inv_n18 () FF0)
(declare-fun mul_n17 () FF0)
(declare-fun f_n5 () FF0)
(declare-fun d_n1 () FF0)
(declare-fun mul_n9 () FF0)
(declare-fun mul_n13 () FF0)
(declare-fun e_n6 () FF0)
(declare-fun a_n0 () FF0)
(declare-fun is_zero_inv_n11 () FF0)
(declare-fun mul_n7 () FF0)
(assert 
  (let ((let0 b))
  (let ((let1 a))
  (let ((let2 f))
  (let ((let3 (or let2 let1 let0)))
  (let ((let4 (not let3)))
  (let ((let5 d))
  (let ((let6 c))
  (let ((let7 (= let6 let5)))
  (let ((let8 e))
  (let ((let9 (ite let8 let2 let3)))
  (let ((let10 (or let1 let0 let6 let8 let1 let2 let5 let0 let5 let6 let8)))
  (let ((let11 (ite let7 let10 let9)))
  (let ((let12 (or let11 let7)))
  (let ((let13 (ite let9 let3 let12)))
  (let ((let14 (=> let13 let12)))
  (let ((let15 (ite let14 let2 let4)))
  (let ((let16 (or let10 let13 let6 let14)))
  (let ((let17 (not let16)))
  (let ((let18 (or let9 let0 let4)))
  (let ((let19 (=> let18 let10)))
  (let ((let20 (ite let18 let19 let17)))
  (let ((let21 (and let20 let15)))
  (let ((let22 return_n3))
  (let ((let23 (as ff1 FF0)))
  (let ((let24 (= let23 let22)))
  (let ((let25 (= let24 let21)))
  (let ((let26 (as ff0 FF0)))
  (let ((let27 (= let26 let22)))
  (let ((let28 (or let24 let27)))
  (let ((let29 (and let28 let25)))
  (let ((let30 mul_n23))
  (let ((let31 (as ff52435875175126190479447740508185965837690552500527637822603658699938581184512 FF0)))
  (let ((let32 is_zero_n19))
  (let ((let33 (ff.mul let32 let31)))
  (let ((let34 mul_n22))
  (let ((let35 (ff.mul let34 let31)))
  (let ((let36 (ff.add let35 let33 let23)))
  (let ((let37 mul_n21))
  (let ((let38 (ff.mul let37 let31)))
  (let ((let39 (ff.add let38 let23)))
  (let ((let40 (ff.mul let39 let36)))
  (let ((let41 (= let40 let30)))
  (let ((let42 is_zero_n12))
  (let ((let43 (ff.mul let39 let42)))
  (let ((let44 (= let43 let34)))
  (let ((let45 mul_n8))
  (let ((let46 (ff.mul let45 let31)))
  (let ((let47 (ff.add let46 let23)))
  (let ((let48 mul_n20))
  (let ((let49 (ff.mul let48 let47)))
  (let ((let50 (= let49 let37)))
  (let ((let51 b_n4))
  (let ((let52 (ff.mul let51 let31)))
  (let ((let53 (ff.add let52 let23)))
  (let ((let54 mul_n10))
  (let ((let55 (ff.mul let54 let31)))
  (let ((let56 (ff.add let45 let55)))
  (let ((let57 (ff.mul let56 let53)))
  (let ((let58 (= let57 let48)))
  (let ((let59 (as ff3 FF0)))
  (let ((let60 mul_n14))
  (let ((let61 (ff.mul let60 let31)))
  (let ((let62 (ff.mul let42 let31)))
  (let ((let63 mul_n15))
  (let ((let64 c_n2))
  (let ((let65 mul_n16))
  (let ((let66 (ff.mul let65 let31)))
  (let ((let67 (ff.add let66 let64 let63 let62 let61 let59)))
  (let ((let68 (ff.mul let32 let67)))
  (let ((let69 (= let68 let26)))
  (let ((let70 (ff.add let33 let23)))
  (let ((let71 is_zero_inv_n18))
  (let ((let72 (ff.mul let71 let67)))
  (let ((let73 (= let72 let70)))
  (let ((let74 mul_n17))
  (let ((let75 f_n5))
  (let ((let76 (ff.add let46 let75)))
  (let ((let77 (ff.add let66 let23)))
  (let ((let78 (ff.mul let77 let76)))
  (let ((let79 (= let78 let74)))
  (let ((let80 (ff.add let61 let63 let23)))
  (let ((let81 (ff.mul let80 let60)))
  (let ((let82 (= let81 let65)))
  (let ((let83 (ff.add let46 let60)))
  (let ((let84 (ff.add let46 let54 let23)))
  (let ((let85 (ff.mul let84 let83)))
  (let ((let86 (= let85 let63)))
  (let ((let87 d_n1))
  (let ((let88 mul_n9))
  (let ((let89 (ff.mul let88 let31)))
  (let ((let90 (ff.add let89 let64 let87)))
  (let ((let91 mul_n13))
  (let ((let92 (ff.mul let91 let31)))
  (let ((let93 (ff.add let45 let92 let55)))
  (let ((let94 (ff.mul let93 let90)))
  (let ((let95 (= let94 let60)))
  (let ((let96 (ff.add let62 let45 let55)))
  (let ((let97 (ff.mul let87 let31)))
  (let ((let98 (ff.mul let64 let31)))
  (let ((let99 (ff.add let88 let98 let97 let23)))
  (let ((let100 (ff.mul let99 let96)))
  (let ((let101 (= let100 let91)))
  (let ((let102 (as ff2 FF0)))
  (let ((let103 e_n6))
  (let ((let104 (ff.mul let103 let102)))
  (let ((let105 (ff.mul let87 let102)))
  (let ((let106 (ff.mul let51 let102)))
  (let ((let107 (ff.mul let64 let102)))
  (let ((let108 a_n0))
  (let ((let109 (ff.mul let108 let102)))
  (let ((let110 (ff.add let109 let75 let107 let106 let105 let104)))
  (let ((let111 (ff.mul let42 let110)))
  (let ((let112 (= let111 let26)))
  (let ((let113 (ff.add let62 let23)))
  (let ((let114 is_zero_inv_n11))
  (let ((let115 (ff.mul let114 let110)))
  (let ((let116 (= let115 let113)))
  (let ((let117 (ff.add let45 let75 let31)))
  (let ((let118 (ff.mul let103 let117)))
  (let ((let119 (= let118 let54)))
  (let ((let120 (ff.mul let107 let87)))
  (let ((let121 (= let120 let88)))
  (let ((let122 mul_n7))
  (let ((let123 (ff.mul let122 let53)))
  (let ((let124 (= let123 let45)))
  (let ((let125 (ff.mul let108 let31)))
  (let ((let126 (ff.add let125 let23)))
  (let ((let127 (ff.mul let75 let31)))
  (let ((let128 (ff.add let127 let23)))
  (let ((let129 (ff.mul let128 let126)))
  (let ((let130 (= let129 let122)))
  (let ((let131 (and let130 let124 let121 let119 let116 let112 let101 let95 let86 let82 let79 let73 let69 let58 let50 let44 let41)))
  (let ((let132 (ite let1 let23 let26)))
  (let ((let133 (= let108 let132)))
  (let ((let134 (ite let5 let23 let26)))
  (let ((let135 (= let87 let134)))
  (let ((let136 (ite let0 let23 let26)))
  (let ((let137 (= let51 let136)))
  (let ((let138 (ite let6 let23 let26)))
  (let ((let139 (= let64 let138)))
  (let ((let140 (ite let8 let23 let26)))
  (let ((let141 (= let103 let140)))
  (let ((let142 (ite let2 let23 let26)))
  (let ((let143 (= let75 let142)))
  (let ((let144 (and let143 let141 let139 let137 let135 let133)))
  (let ((let145 (and let144 let131)))
  (let ((let146 (=> let145 let29)))
  (let ((let147 (not let146)))
  let147
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
)
(check-sat)
