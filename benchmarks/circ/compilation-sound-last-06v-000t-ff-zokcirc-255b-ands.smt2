(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-logic QF_FF)
(define-sort FF0 () (_ FiniteField 52435875175126190479447740508185965837690552500527637822603658699938581184513))
(declare-fun x5 () Bool)
(declare-fun x4 () Bool)
(declare-fun x3 () Bool)
(declare-fun x2 () Bool)
(declare-fun x1 () Bool)
(declare-fun x0 () Bool)
(declare-fun return_n6 () FF0)
(declare-fun mul_n10 () FF0)
(declare-fun x4_n1 () FF0)
(declare-fun mul_n9 () FF0)
(declare-fun x3_n3 () FF0)
(declare-fun mul_n8 () FF0)
(declare-fun x2_n5 () FF0)
(declare-fun mul_n7 () FF0)
(declare-fun x1_n2 () FF0)
(declare-fun x0_n4 () FF0)
(declare-fun x5_n0 () FF0)
(assert 
  (let ((let0 x5))
  (let ((let1 x4))
  (let ((let2 x3))
  (let ((let3 x2))
  (let ((let4 x1))
  (let ((let5 x0))
  (let ((let6 (and let5 let4 let3 let2 let1 let0)))
  (let ((let7 return_n6))
  (let ((let8 (as ff1 FF0)))
  (let ((let9 (= let8 let7)))
  (let ((let10 (= let9 let6)))
  (let ((let11 (as ff0 FF0)))
  (let ((let12 (= let11 let7)))
  (let ((let13 (or let9 let12)))
  (let ((let14 (and let13 let10)))
  (let ((let15 mul_n10))
  (let ((let16 x4_n1))
  (let ((let17 mul_n9))
  (let ((let18 (ff.mul let17 let16)))
  (let ((let19 (= let18 let15)))
  (let ((let20 x3_n3))
  (let ((let21 mul_n8))
  (let ((let22 (ff.mul let21 let20)))
  (let ((let23 (= let22 let17)))
  (let ((let24 x2_n5))
  (let ((let25 mul_n7))
  (let ((let26 (ff.mul let25 let24)))
  (let ((let27 (= let26 let21)))
  (let ((let28 x1_n2))
  (let ((let29 x0_n4))
  (let ((let30 (ff.mul let29 let28)))
  (let ((let31 (= let30 let25)))
  (let ((let32 (and let31 let27 let23 let19)))
  (let ((let33 (ite let5 let8 let11)))
  (let ((let34 (= let29 let33)))
  (let ((let35 (ite let2 let8 let11)))
  (let ((let36 (= let20 let35)))
  (let ((let37 (ite let1 let8 let11)))
  (let ((let38 (= let16 let37)))
  (let ((let39 (ite let4 let8 let11)))
  (let ((let40 (= let28 let39)))
  (let ((let41 (ite let3 let8 let11)))
  (let ((let42 (= let24 let41)))
  (let ((let43 (ite let0 let8 let11)))
  (let ((let44 x5_n0))
  (let ((let45 (= let44 let43)))
  (let ((let46 (and let45 let42 let40 let38 let36 let34)))
  (let ((let47 (and let46 let32)))
  (let ((let48 (=> let47 let14)))
  (let ((let49 (not let48)))
  let49
))))))))))))))))))))))))))))))))))))))))))))))))))
)
(check-sat)
