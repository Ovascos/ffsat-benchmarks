(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-logic QF_FFA)
(define-sort FF0 () (_ FiniteField 52435875175126190479447740508185965837690552500527637822603658699938581184513))
(declare-fun f () Bool)
(declare-fun e () Bool)
(declare-fun d () Bool)
(declare-fun c () Bool)
(declare-fun b () Bool)
(declare-fun a () Bool)
(declare-fun return_n3 () FF0)
(declare-fun mul_n10 () FF0)
(declare-fun e_n0 () FF0)
(declare-fun mul_n9 () FF0)
(declare-fun d_n1 () FF0)
(declare-fun mul_n8 () FF0)
(declare-fun c_n2 () FF0)
(declare-fun mul_n7 () FF0)
(declare-fun b_n4 () FF0)
(declare-fun a_n6 () FF0)
(declare-fun f_n5 () FF0)
(assert 
  (let ((let0 f))
  (let ((let1 e))
  (let ((let2 d))
  (let ((let3 c))
  (let ((let4 b))
  (let ((let5 a))
  (let ((let6 (and let5 let4 let3 let2 let1 let0)))
  (let ((let7 return_n3))
  (let ((let8 (as ff1 FF0)))
  (let ((let9 (= let8 let7)))
  (let ((let10 (= let9 let6)))
  (let ((let11 (as ff0 FF0)))
  (let ((let12 (= let11 let7)))
  (let ((let13 (or let9 let12)))
  (let ((let14 (and let13 let10)))
  (let ((let15 mul_n10))
  (let ((let16 e_n0))
  (let ((let17 mul_n9))
  (let ((let18 (ff.mul let17 let16)))
  (let ((let19 (= let18 let15)))
  (let ((let20 d_n1))
  (let ((let21 mul_n8))
  (let ((let22 (ff.mul let21 let20)))
  (let ((let23 (= let22 let17)))
  (let ((let24 c_n2))
  (let ((let25 mul_n7))
  (let ((let26 (ff.mul let25 let24)))
  (let ((let27 (= let26 let21)))
  (let ((let28 b_n4))
  (let ((let29 a_n6))
  (let ((let30 (ff.mul let29 let28)))
  (let ((let31 (= let30 let25)))
  (let ((let32 (and let31 let27 let23 let19)))
  (let ((let33 (ite let5 let8 let11)))
  (let ((let34 (= let29 let33)))
  (let ((let35 (ite let3 let8 let11)))
  (let ((let36 (= let24 let35)))
  (let ((let37 (ite let0 let8 let11)))
  (let ((let38 f_n5))
  (let ((let39 (= let38 let37)))
  (let ((let40 (ite let2 let8 let11)))
  (let ((let41 (= let20 let40)))
  (let ((let42 (ite let1 let8 let11)))
  (let ((let43 (= let16 let42)))
  (let ((let44 (ite let4 let8 let11)))
  (let ((let45 (= let28 let44)))
  (let ((let46 (and let45 let43 let41 let39 let36 let34)))
  (let ((let47 (and let46 let32)))
  (let ((let48 (=> let47 let14)))
  (let ((let49 (not let48)))
  let49
))))))))))))))))))))))))))))))))))))))))))))))))))
)
(check-sat)
