(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-logic QF_FFA)
(define-sort FF0 () (_ FiniteField 52435875175126190479447740508185965837690552500527637822603658699938581184513))
(declare-fun a () Bool)
(declare-fun d () Bool)
(declare-fun c () Bool)
(declare-fun b () Bool)
(declare-fun out () FF0)
(declare-fun _7 () FF0)
(declare-fun _0 () FF0)
(declare-fun _6 () FF0)
(declare-fun _3 () FF0)
(declare-fun _5 () FF0)
(declare-fun _2 () FF0)
(declare-fun _1 () FF0)
(assert 
  (let ((let0 a))
  (let ((let1 (not let0)))
  (let ((let2 d))
  (let ((let3 c))
  (let ((let4 b))
  (let ((let5 (and let4 let3 let2 let1)))
  (let ((let6 out))
  (let ((let7 (as ff1 FF0)))
  (let ((let8 (= let7 let6)))
  (let ((let9 (= let8 let5)))
  (let ((let10 (as ff0 FF0)))
  (let ((let11 (= let10 let6)))
  (let ((let12 (or let8 let11)))
  (let ((let13 (and let12 let9)))
  (let ((let14 _7))
  (let ((let15 (as ff52435875175126190479447740508185965837690552500527637822603658699938581184512 FF0)))
  (let ((let16 _0))
  (let ((let17 (ff.mul let16 let15)))
  (let ((let18 (ff.add let17 let7)))
  (let ((let19 _6))
  (let ((let20 (ff.mul let19 let18)))
  (let ((let21 (= let20 let14)))
  (let ((let22 _3))
  (let ((let23 _5))
  (let ((let24 (ff.mul let23 let22)))
  (let ((let25 (= let24 let19)))
  (let ((let26 _2))
  (let ((let27 _1))
  (let ((let28 (ff.mul let27 let26)))
  (let ((let29 (= let28 let23)))
  (let ((let30 (ff.mul let22 let22)))
  (let ((let31 (= let30 let22)))
  (let ((let32 (ff.mul let26 let26)))
  (let ((let33 (= let32 let26)))
  (let ((let34 (ff.mul let27 let27)))
  (let ((let35 (= let34 let27)))
  (let ((let36 (ff.mul let16 let16)))
  (let ((let37 (= let36 let16)))
  (let ((let38 (and let37 let35 let33 let31 let29 let25 let21)))
  (let ((let39 (ite let0 let7 let10)))
  (let ((let40 (= let16 let39)))
  (let ((let41 (ite let3 let7 let10)))
  (let ((let42 (= let26 let41)))
  (let ((let43 (ite let4 let7 let10)))
  (let ((let44 (= let27 let43)))
  (let ((let45 (ite let2 let7 let10)))
  (let ((let46 (= let22 let45)))
  (let ((let47 (and let46 let44 let42 let40)))
  (let ((let48 (and let47 let38)))
  (let ((let49 (=> let48 let13)))
  (let ((let50 (not let49)))
  let50
)))))))))))))))))))))))))))))))))))))))))))))))))))
)
(check-sat)
