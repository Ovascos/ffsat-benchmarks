(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-logic QF_FFA)
(define-sort FF0 () (_ FiniteField 52435875175126190479447740508185965837690552500527637822603658699938581184513))
(declare-fun d () Bool)
(declare-fun c () Bool)
(declare-fun b () Bool)
(declare-fun a () Bool)
(declare-fun out () FF0)
(declare-fun _6 () FF0)
(declare-fun _3 () FF0)
(declare-fun _5 () FF0)
(declare-fun _4 () FF0)
(declare-fun _1 () FF0)
(declare-fun _0 () FF0)
(declare-fun _2 () FF0)
(assert 
  (let ((let0 d))
  (let ((let1 c))
  (let ((let2 b))
  (let ((let3 a))
  (let ((let4 (and let3 let2 let1 let0)))
  (let ((let5 out))
  (let ((let6 (as ff1 FF0)))
  (let ((let7 (= let6 let5)))
  (let ((let8 (= let7 let4)))
  (let ((let9 (as ff0 FF0)))
  (let ((let10 (= let9 let5)))
  (let ((let11 (or let7 let10)))
  (let ((let12 (and let11 let8)))
  (let ((let13 _6))
  (let ((let14 (= let13 let5)))
  (let ((let15 _3))
  (let ((let16 _5))
  (let ((let17 (ff.mul let16 let15)))
  (let ((let18 (= let17 let13)))
  (let ((let19 _4))
  (let ((let20 _1))
  (let ((let21 _0))
  (let ((let22 (ff.mul let21 let20)))
  (let ((let23 (= let22 let19)))
  (let ((let24 (ff.mul let15 let15)))
  (let ((let25 (= let24 let15)))
  (let ((let26 _2))
  (let ((let27 (ff.mul let26 let26)))
  (let ((let28 (= let27 let26)))
  (let ((let29 (ff.mul let20 let20)))
  (let ((let30 (= let29 let20)))
  (let ((let31 (ff.mul let21 let21)))
  (let ((let32 (= let31 let21)))
  (let ((let33 (and let32 let30 let28 let25 let23 let18 let14)))
  (let ((let34 (ite let2 let6 let9)))
  (let ((let35 (= let20 let34)))
  (let ((let36 (ite let3 let6 let9)))
  (let ((let37 (= let21 let36)))
  (let ((let38 (ite let0 let6 let9)))
  (let ((let39 (= let15 let38)))
  (let ((let40 (ite let1 let6 let9)))
  (let ((let41 (= let26 let40)))
  (let ((let42 (and let41 let39 let37 let35)))
  (let ((let43 (and let42 let33)))
  (let ((let44 (=> let43 let12)))
  (let ((let45 (not let44)))
  let45
))))))))))))))))))))))))))))))))))))))))))))))
)
(check-sat)
