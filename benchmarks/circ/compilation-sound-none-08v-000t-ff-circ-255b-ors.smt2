(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-logic QF_FFA)
(define-sort FF0 () (_ FiniteField 52435875175126190479447740508185965837690552500527637822603658699938581184513))
(declare-fun x7 () Bool)
(declare-fun x6 () Bool)
(declare-fun x5 () Bool)
(declare-fun x4 () Bool)
(declare-fun x3 () Bool)
(declare-fun x2 () Bool)
(declare-fun x1 () Bool)
(declare-fun x0 () Bool)
(declare-fun return_n6 () FF0)
(declare-fun x7_n3 () FF0)
(declare-fun x1_n2 () FF0)
(declare-fun x6_n5 () FF0)
(declare-fun x2_n8 () FF0)
(declare-fun x4_n1 () FF0)
(declare-fun x0_n4 () FF0)
(declare-fun x3_n7 () FF0)
(declare-fun x5_n0 () FF0)
(declare-fun is_zero_inv_n9 () FF0)
(assert 
  (let ((let0 x7))
  (let ((let1 x6))
  (let ((let2 x5))
  (let ((let3 x4))
  (let ((let4 x3))
  (let ((let5 x2))
  (let ((let6 x1))
  (let ((let7 x0))
  (let ((let8 (or let7 let6 let5 let4 let3 let2 let1 let0)))
  (let ((let9 return_n6))
  (let ((let10 (as ff1 FF0)))
  (let ((let11 (= let10 let9)))
  (let ((let12 (= let11 let8)))
  (let ((let13 (as ff0 FF0)))
  (let ((let14 (= let13 let9)))
  (let ((let15 (or let11 let14)))
  (let ((let16 (and let15 let12)))
  (let ((let17 x7_n3))
  (let ((let18 x1_n2))
  (let ((let19 x6_n5))
  (let ((let20 x2_n8))
  (let ((let21 x4_n1))
  (let ((let22 x0_n4))
  (let ((let23 x3_n7))
  (let ((let24 x5_n0))
  (let ((let25 (ff.add let24 let23 let22 let21 let20 let19 let18 let17)))
  (let ((let26 (as ff52435875175126190479447740508185965837690552500527637822603658699938581184512 FF0)))
  (let ((let27 (ff.mul let9 let26)))
  (let ((let28 (ff.add let27 let10)))
  (let ((let29 (ff.mul let28 let25)))
  (let ((let30 (= let29 let13)))
  (let ((let31 is_zero_inv_n9))
  (let ((let32 (ff.mul let31 let25)))
  (let ((let33 (= let32 let9)))
  (let ((let34 (and let33 let30)))
  (let ((let35 (ite let1 let10 let13)))
  (let ((let36 (= let19 let35)))
  (let ((let37 (ite let3 let10 let13)))
  (let ((let38 (= let21 let37)))
  (let ((let39 (ite let7 let10 let13)))
  (let ((let40 (= let22 let39)))
  (let ((let41 (ite let5 let10 let13)))
  (let ((let42 (= let20 let41)))
  (let ((let43 (ite let0 let10 let13)))
  (let ((let44 (= let17 let43)))
  (let ((let45 (ite let6 let10 let13)))
  (let ((let46 (= let18 let45)))
  (let ((let47 (ite let2 let10 let13)))
  (let ((let48 (= let24 let47)))
  (let ((let49 (ite let4 let10 let13)))
  (let ((let50 (= let23 let49)))
  (let ((let51 (and let50 let48 let46 let44 let42 let40 let38 let36)))
  (let ((let52 (and let51 let34)))
  (let ((let53 (=> let52 let16)))
  (let ((let54 (not let53)))
  let54
)))))))))))))))))))))))))))))))))))))))))))))))))))))))
)
(check-sat)
