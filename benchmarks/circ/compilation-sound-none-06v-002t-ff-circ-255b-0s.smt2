(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-logic QF_FFA)
(define-sort FF0 () (_ FiniteField 52435875175126190479447740508185965837690552500527637822603658699938581184513))
(declare-fun c () Bool)
(declare-fun b () Bool)
(declare-fun d () Bool)
(declare-fun f () Bool)
(declare-fun e () Bool)
(declare-fun a () Bool)
(declare-fun return_n3 () FF0)
(declare-fun a_n6 () FF0)
(declare-fun mul_n7 () FF0)
(declare-fun c_n2 () FF0)
(declare-fun f_n5 () FF0)
(declare-fun e_n0 () FF0)
(declare-fun is_zero_inv_n8 () FF0)
(declare-fun b_n4 () FF0)
(declare-fun d_n1 () FF0)
(assert 
  (let ((let0 c))
  (let ((let1 b))
  (let ((let2 d))
  (let ((let3 (ite let2 let1 let0)))
  (let ((let4 f))
  (let ((let5 e))
  (let ((let6 a))
  (let ((let7 (or let6 let5 let4 let3)))
  (let ((let8 return_n3))
  (let ((let9 (as ff1 FF0)))
  (let ((let10 (= let9 let8)))
  (let ((let11 (= let10 let7)))
  (let ((let12 (as ff0 FF0)))
  (let ((let13 (= let12 let8)))
  (let ((let14 (or let10 let13)))
  (let ((let15 (and let14 let11)))
  (let ((let16 a_n6))
  (let ((let17 mul_n7))
  (let ((let18 c_n2))
  (let ((let19 f_n5))
  (let ((let20 e_n0))
  (let ((let21 (ff.add let20 let19 let18 let17 let16)))
  (let ((let22 (as ff52435875175126190479447740508185965837690552500527637822603658699938581184512 FF0)))
  (let ((let23 (ff.mul let8 let22)))
  (let ((let24 (ff.add let23 let9)))
  (let ((let25 (ff.mul let24 let21)))
  (let ((let26 (= let25 let12)))
  (let ((let27 is_zero_inv_n8))
  (let ((let28 (ff.mul let27 let21)))
  (let ((let29 (= let28 let8)))
  (let ((let30 (ff.mul let18 let22)))
  (let ((let31 b_n4))
  (let ((let32 (ff.add let31 let30)))
  (let ((let33 d_n1))
  (let ((let34 (ff.mul let33 let32)))
  (let ((let35 (= let34 let17)))
  (let ((let36 (and let35 let29 let26)))
  (let ((let37 (ite let6 let9 let12)))
  (let ((let38 (= let16 let37)))
  (let ((let39 (ite let5 let9 let12)))
  (let ((let40 (= let20 let39)))
  (let ((let41 (ite let2 let9 let12)))
  (let ((let42 (= let33 let41)))
  (let ((let43 (ite let1 let9 let12)))
  (let ((let44 (= let31 let43)))
  (let ((let45 (ite let4 let9 let12)))
  (let ((let46 (= let19 let45)))
  (let ((let47 (ite let0 let9 let12)))
  (let ((let48 (= let18 let47)))
  (let ((let49 (and let48 let46 let44 let42 let40 let38)))
  (let ((let50 (and let49 let36)))
  (let ((let51 (=> let50 let15)))
  (let ((let52 (not let51)))
  let52
)))))))))))))))))))))))))))))))))))))))))))))))))))))
)
(check-sat)
