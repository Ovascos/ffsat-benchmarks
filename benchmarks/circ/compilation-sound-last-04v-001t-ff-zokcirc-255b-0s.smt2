(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-logic QF_FFA)
(define-sort FF0 () (_ FiniteField 52435875175126190479447740508185965837690552500527637822603658699938581184513))
(declare-fun d () Bool)
(declare-fun c () Bool)
(declare-fun b () Bool)
(declare-fun a () Bool)
(declare-fun return_n2 () FF0)
(declare-fun mul_n6 () FF0)
(declare-fun c_n1 () FF0)
(declare-fun mul_n5 () FF0)
(declare-fun b_n3 () FF0)
(declare-fun a_n4 () FF0)
(declare-fun d_n0 () FF0)
(assert 
  (let ((let0 d))
  (let ((let1 c))
  (let ((let2 b))
  (let ((let3 a))
  (let ((let4 (and let3 let2 let1 let0)))
  (let ((let5 return_n2))
  (let ((let6 (as ff1 FF0)))
  (let ((let7 (= let6 let5)))
  (let ((let8 (= let7 let4)))
  (let ((let9 (as ff0 FF0)))
  (let ((let10 (= let9 let5)))
  (let ((let11 (or let7 let10)))
  (let ((let12 (and let11 let8)))
  (let ((let13 mul_n6))
  (let ((let14 c_n1))
  (let ((let15 mul_n5))
  (let ((let16 (ff.mul let15 let14)))
  (let ((let17 (= let16 let13)))
  (let ((let18 b_n3))
  (let ((let19 a_n4))
  (let ((let20 (ff.mul let19 let18)))
  (let ((let21 (= let20 let15)))
  (let ((let22 (and let21 let17)))
  (let ((let23 (ite let1 let6 let9)))
  (let ((let24 (= let14 let23)))
  (let ((let25 (ite let2 let6 let9)))
  (let ((let26 (= let18 let25)))
  (let ((let27 (ite let0 let6 let9)))
  (let ((let28 d_n0))
  (let ((let29 (= let28 let27)))
  (let ((let30 (ite let3 let6 let9)))
  (let ((let31 (= let19 let30)))
  (let ((let32 (and let31 let29 let26 let24)))
  (let ((let33 (and let32 let22)))
  (let ((let34 (=> let33 let12)))
  (let ((let35 (not let34)))
  let35
))))))))))))))))))))))))))))))))))))
)
(check-sat)
