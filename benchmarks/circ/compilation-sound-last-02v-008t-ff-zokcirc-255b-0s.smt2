(set-info :smt-lib-version 2.6)
(set-info :category "crafted")
(set-logic QF_FFA)
(define-sort FF0 () (_ FiniteField 52435875175126190479447740508185965837690552500527637822603658699938581184513))
(declare-fun a () Bool)
(declare-fun b () Bool)
(declare-fun return_n0 () FF0)
(declare-fun mul_n7 () FF0)
(declare-fun mul_n6 () FF0)
(declare-fun b_n1 () FF0)
(declare-fun mul_n4 () FF0)
(declare-fun a_n2 () FF0)
(declare-fun mul_n5 () FF0)
(declare-fun mul_n3 () FF0)
(assert 
  (let ((let0 a))
  (let ((let1 (not let0)))
  (let ((let2 (not let1)))
  (let ((let3 (= let2 let0)))
  (let ((let4 b))
  (let ((let5 (= let4 let4)))
  (let ((let6 (= let2 let4)))
  (let ((let7 (ite let1 let0 let6)))
  (let ((let8 (ite let6 let7 let5)))
  (let ((let9 (or let8 let3)))
  (let ((let10 return_n0))
  (let ((let11 (as ff1 FF0)))
  (let ((let12 (= let11 let10)))
  (let ((let13 (= let12 let9)))
  (let ((let14 (as ff0 FF0)))
  (let ((let15 (= let14 let10)))
  (let ((let16 (or let12 let15)))
  (let ((let17 (and let16 let13)))
  (let ((let18 mul_n7))
  (let ((let19 mul_n6))
  (let ((let20 b_n1))
  (let ((let21 (as ff52435875175126190479447740508185965837690552500527637822603658699938581184512 FF0)))
  (let ((let22 mul_n4))
  (let ((let23 (ff.mul let22 let21)))
  (let ((let24 a_n2))
  (let ((let25 (ff.mul let24 let21)))
  (let ((let26 mul_n5))
  (let ((let27 (ff.add let26 let25 let23 let20 let19)))
  (let ((let28 (ff.mul let20 let21)))
  (let ((let29 (ff.add let26 let25 let28 let11)))
  (let ((let30 (ff.mul let29 let27)))
  (let ((let31 (= let30 let18)))
  (let ((let32 (as ff2 FF0)))
  (let ((let33 (ff.mul let24 let32)))
  (let ((let34 (ff.mul let26 let21)))
  (let ((let35 (ff.add let34 let33 let20 let21)))
  (let ((let36 (ff.add let25 let11)))
  (let ((let37 (ff.mul let36 let35)))
  (let ((let38 (= let37 let19)))
  (let ((let39 (ff.mul let33 let20)))
  (let ((let40 (= let39 let26)))
  (let ((let41 (ff.mul let20 let32)))
  (let ((let42 (ff.mul let41 let20)))
  (let ((let43 (= let42 let22)))
  (let ((let44 mul_n3))
  (let ((let45 (ff.mul let33 let24)))
  (let ((let46 (= let45 let44)))
  (let ((let47 (and let46 let43 let40 let38 let31)))
  (let ((let48 (ite let4 let11 let14)))
  (let ((let49 (= let20 let48)))
  (let ((let50 (ite let0 let11 let14)))
  (let ((let51 (= let24 let50)))
  (let ((let52 (and let51 let49)))
  (let ((let53 (and let52 let47)))
  (let ((let54 (=> let53 let17)))
  (let ((let55 (not let54)))
  let55
))))))))))))))))))))))))))))))))))))))))))))))))))))))))
)
(check-sat)
