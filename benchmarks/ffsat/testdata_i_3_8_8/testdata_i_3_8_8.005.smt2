
(set-info :smt-lib-version 2.6)
(set-logic QF_FF)
(define-sort FF0 () (_ FiniteField 3))
(declare-fun x0 () FF0)
(declare-fun x1 () FF0)
(declare-fun x2 () FF0)
(declare-fun x3 () FF0)
(declare-fun x4 () FF0)
(declare-fun x5 () FF0)
(declare-fun x6 () FF0)
(declare-fun x7 () FF0)
(assert
  (let ((let0 (ff.mul x4 x4 x4)))
  (let ((let1 (ff.mul (as ff2 FF0) x4 x5 x5)))
  (let ((let2 (ff.mul x5 x6 x6)))
  (let ((let3 (ff.mul (as ff2 FF0) x1 x4 x7)))
  (let ((let4 (ff.mul (as ff2 FF0) x2 x6 x7)))
  (let ((let5 (as ff1 FF0)))
  (let ((let6 (ff.add let0 let1 let2 let3 let4 let5)))
  (let ((let7 (= let6 (as ff0 FF0))))
  (let ((let8 (ff.mul x3 x3 x5)))
  (let ((let9 (ff.mul (as ff2 FF0) x2 x7)))
  (let ((let10 (ff.add let8 let9)))
  (let ((let11 (= let10 (as ff0 FF0))))
  (let ((let12 (ff.mul x1 x1 x4)))
  (let ((let13 (ff.mul (as ff2 FF0) x2 x2 x4)))
  (let ((let14 (ff.mul x4 x6 x7)))
  (let ((let15 (as ff2 FF0)))
  (let ((let16 (ff.add let12 let13 let14 let15)))
  (let ((let17 (= let16 (as ff0 FF0))))
  (let ((let18 (ff.mul x0 x1 x6)))
  (let ((let19 (ff.mul x3 x4 x7)))
  (let ((let20 (ff.mul (as ff2 FF0) x1 x7 x7)))
  (let ((let21 (ff.add let18 let19 let20)))
  (let ((let22 (= let21 (as ff0 FF0))))
  (let ((let23 (ff.mul (as ff2 FF0) x0 x0 x2)))
  (let ((let24 (ff.mul x0 x1 x4)))
  (let ((let25 (ff.mul x2 x2 x4)))
  (let ((let26 (ff.mul x0 x3 x5)))
  (let ((let27 (as ff2 FF0)))
  (let ((let28 (ff.add let23 let24 let25 let26 let27)))
  (let ((let29 (= let28 (as ff0 FF0))))
  (let ((let30 (ff.mul x0 x4 x6)))
  (let ((let31 (ff.mul x0 x4)))
  (let ((let32 (ff.mul (as ff2 FF0) x1 x4)))
  (let ((let33 (ff.mul (as ff2 FF0) x2 x6)))
  (let ((let34 (ff.add let30 let31 let32 let33)))
  (let ((let35 (= let34 (as ff0 FF0))))
  (let ((let36 (ff.mul (as ff2 FF0) x2 x3 x4)))
  (let ((let37 (ff.mul (as ff2 FF0) x2 x4 x6)))
  (let ((let38 (ff.mul (as ff2 FF0) x3 x6 x7)))
  (let ((let39 (ff.mul x1 x7 x7)))
  (let ((let40 (ff.mul x2 x3)))
  (let ((let41 (as ff1 FF0)))
  (let ((let42 (ff.add let36 let37 let38 let39 let40 let41)))
  (let ((let43 (= let42 (as ff0 FF0))))
  (let ((let44 (ff.mul x2 x3 x5)))
  (let ((let45 x6))
  (let ((let46 (ff.add let44 let45)))
  (let ((let47 (= let46 (as ff0 FF0))))
  (let ((let48 (and let7 let11 let17 let22 let29 let35 let43 let47)))
  let48
)))))))))))))))))))))))))))))))))))))))))))))))))
)
(check-sat)
