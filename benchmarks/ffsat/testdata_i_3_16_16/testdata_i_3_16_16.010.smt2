
(set-info :smt-lib-version 2.6)
(set-logic QF_FF)
(define-sort FF0 () (_ FiniteField 3))
(declare-fun x0 () FF0)
(declare-fun x1 () FF0)
(declare-fun x2 () FF0)
(declare-fun x3 () FF0)
(declare-fun x4 () FF0)
(declare-fun x5 () FF0)
(declare-fun x6 () FF0)
(declare-fun x7 () FF0)
(declare-fun x8 () FF0)
(declare-fun x9 () FF0)
(declare-fun x10 () FF0)
(declare-fun x11 () FF0)
(declare-fun x12 () FF0)
(declare-fun x13 () FF0)
(declare-fun x14 () FF0)
(declare-fun x15 () FF0)
(assert
  (let ((let0 (ff.mul x0 x0 x3)))
  (let ((let1 (ff.mul x2 x8 x15)))
  (let ((let2 (ff.mul x3 x13 x15)))
  (let ((let3 (ff.add let0 let1 let2)))
  (let ((let4 (= let3 (as ff0 FF0))))
  (let ((let5 (ff.mul x9 x10 x12)))
  (let ((let6 (= let5 (as ff0 FF0))))
  (let ((let7 (ff.mul x10 x11 x14)))
  (let ((let8 (ff.mul x1 x8 x15)))
  (let ((let9 (ff.mul x3 x8 x15)))
  (let ((let10 x5))
  (let ((let11 (ff.add let7 let8 let9 let10)))
  (let ((let12 (= let11 (as ff0 FF0))))
  (let ((let13 (ff.mul x2 x5 x11)))
  (let ((let14 (ff.mul x12 x13)))
  (let ((let15 (as ff2 FF0)))
  (let ((let16 (ff.add let13 let14 let15)))
  (let ((let17 (= let16 (as ff0 FF0))))
  (let ((let18 (ff.mul (as ff2 FF0) x0 x9 x13)))
  (let ((let19 (= let18 (as ff0 FF0))))
  (let ((let20 (ff.mul x2 x9 x11)))
  (let ((let21 (ff.mul (as ff2 FF0) x15 x15)))
  (let ((let22 (ff.add let20 let21)))
  (let ((let23 (= let22 (as ff0 FF0))))
  (let ((let24 (ff.mul x0 x11 x13)))
  (let ((let25 (ff.mul x0 x5 x14)))
  (let ((let26 x6))
  (let ((let27 (ff.add let24 let25 let26)))
  (let ((let28 (= let27 (as ff0 FF0))))
  (let ((let29 (ff.mul x1 x2 x12)))
  (let ((let30 (ff.mul x4 x11 x12)))
  (let ((let31 (ff.mul x5 x10 x13)))
  (let ((let32 (ff.mul (as ff2 FF0) x6 x11 x13)))
  (let ((let33 (as ff2 FF0)))
  (let ((let34 (ff.add let29 let30 let31 let32 let33)))
  (let ((let35 (= let34 (as ff0 FF0))))
  (let ((let36 (ff.mul x11 x12 x13)))
  (let ((let37 (ff.mul x8 x15 x15)))
  (let ((let38 (ff.mul x0 x3)))
  (let ((let39 (ff.add let36 let37 let38)))
  (let ((let40 (= let39 (as ff0 FF0))))
  (let ((let41 (ff.mul (as ff2 FF0) x1 x2 x7)))
  (let ((let42 (ff.mul (as ff2 FF0) x1 x6 x9)))
  (let ((let43 (ff.mul x9 x15)))
  (let ((let44 (ff.add let41 let42 let43)))
  (let ((let45 (= let44 (as ff0 FF0))))
  (let ((let46 (ff.mul (as ff2 FF0) x0 x1 x13)))
  (let ((let47 (ff.mul (as ff2 FF0) x8 x8 x13)))
  (let ((let48 (ff.add let46 let47)))
  (let ((let49 (= let48 (as ff0 FF0))))
  (let ((let50 (ff.mul (as ff2 FF0) x3 x11 x11)))
  (let ((let51 (ff.mul (as ff2 FF0) x3 x9 x12)))
  (let ((let52 (ff.add let50 let51)))
  (let ((let53 (= let52 (as ff0 FF0))))
  (let ((let54 (ff.mul x7 x7 x10)))
  (let ((let55 (ff.mul x10 x11 x11)))
  (let ((let56 (ff.mul (as ff2 FF0) x14 x14 x15)))
  (let ((let57 (ff.mul x5 x10)))
  (let ((let58 (ff.add let54 let55 let56 let57)))
  (let ((let59 (= let58 (as ff0 FF0))))
  (let ((let60 (ff.mul x6 x6 x7)))
  (let ((let61 (ff.mul (as ff2 FF0) x1 x3 x11)))
  (let ((let62 (ff.mul (as ff2 FF0) x6 x9 x14)))
  (let ((let63 (ff.mul x3 x10 x15)))
  (let ((let64 (ff.add let60 let61 let62 let63)))
  (let ((let65 (= let64 (as ff0 FF0))))
  (let ((let66 (ff.mul x0 x5 x8)))
  (let ((let67 (ff.mul x5 x9 x9)))
  (let ((let68 (ff.mul (as ff2 FF0) x4 x4 x12)))
  (let ((let69 (ff.mul x2 x3 x13)))
  (let ((let70 (ff.add let66 let67 let68 let69)))
  (let ((let71 (= let70 (as ff0 FF0))))
  (let ((let72 (ff.mul x1 x3 x5)))
  (let ((let73 (ff.mul x1 x12)))
  (let ((let74 (ff.add let72 let73)))
  (let ((let75 (= let74 (as ff0 FF0))))
  (let ((let76 (and let4 let6 let12 let17 let19 let23 let28 let35 let40 let45 let49 let53 let59 let65 let71 let75)))
  let76
)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
)
(check-sat)
