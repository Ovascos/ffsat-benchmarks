
(set-info :smt-lib-version 2.6)
(set-logic QF_FFA)
(define-sort FF0 () (_ FiniteField 3))
(declare-fun x0 () FF0)
(declare-fun x1 () FF0)
(declare-fun x2 () FF0)
(declare-fun x3 () FF0)
(declare-fun x4 () FF0)
(declare-fun x5 () FF0)
(declare-fun x6 () FF0)
(declare-fun x7 () FF0)
(declare-fun x8 () FF0)
(declare-fun x9 () FF0)
(declare-fun x10 () FF0)
(declare-fun x11 () FF0)
(declare-fun x12 () FF0)
(declare-fun x13 () FF0)
(declare-fun x14 () FF0)
(declare-fun x15 () FF0)
(assert
  (let ((let0 (ff.mul (as ff2 FF0) x0 x4 x5)))
  (let ((let1 (ff.mul x2 x5 x8)))
  (let ((let2 (ff.mul (as ff2 FF0) x4 x7 x9)))
  (let ((let3 (ff.mul (as ff2 FF0) x11 x11 x15)))
  (let ((let4 (ff.mul (as ff2 FF0) x12)))
  (let ((let5 (ff.add let0 let1 let2 let3 let4)))
  (let ((let6 (= let5 (as ff0 FF0))))
  (let ((let7 (ff.mul x3 x8 x9)))
  (let ((let8 (ff.mul x2 x12 x12)))
  (let ((let9 (ff.mul (as ff2 FF0) x6 x14 x14)))
  (let ((let10 (ff.mul x9 x14)))
  (let ((let11 (ff.add let7 let8 let9 let10)))
  (let ((let12 (= let11 (as ff0 FF0))))
  (let ((let13 (ff.mul (as ff2 FF0) x3 x4 x12)))
  (let ((let14 (ff.mul (as ff2 FF0) x6 x11 x13)))
  (let ((let15 (ff.add let13 let14)))
  (let ((let16 (= let15 (as ff0 FF0))))
  (let ((let17 (ff.mul (as ff2 FF0) x5 x6 x8)))
  (let ((let18 (ff.mul x6 x8 x9)))
  (let ((let19 (ff.mul (as ff2 FF0) x3 x10 x13)))
  (let ((let20 x9))
  (let ((let21 (ff.add let17 let18 let19 let20)))
  (let ((let22 (= let21 (as ff0 FF0))))
  (let ((let23 (ff.mul x0 x10 x10)))
  (let ((let24 (ff.mul x2 x4 x11)))
  (let ((let25 (ff.mul (as ff2 FF0) x4 x4 x13)))
  (let ((let26 (ff.mul (as ff2 FF0) x6 x8 x13)))
  (let ((let27 (ff.mul (as ff2 FF0) x1 x6)))
  (let ((let28 (ff.add let23 let24 let25 let26 let27)))
  (let ((let29 (= let28 (as ff0 FF0))))
  (let ((let30 (ff.mul (as ff2 FF0) x7 x9 x9)))
  (let ((let31 (ff.mul (as ff2 FF0) x7 x11 x14)))
  (let ((let32 (ff.add let30 let31)))
  (let ((let33 (= let32 (as ff0 FF0))))
  (let ((let34 (ff.mul (as ff2 FF0) x0 x4 x8)))
  (let ((let35 (ff.mul (as ff2 FF0) x1 x4 x10)))
  (let ((let36 (ff.mul (as ff2 FF0) x7 x13 x14)))
  (let ((let37 (as ff2 FF0)))
  (let ((let38 (ff.add let34 let35 let36 let37)))
  (let ((let39 (= let38 (as ff0 FF0))))
  (let ((let40 (ff.mul (as ff2 FF0) x0 x3 x14)))
  (let ((let41 (ff.mul (as ff2 FF0) x5 x12 x14)))
  (let ((let42 (ff.mul x2 x12 x15)))
  (let ((let43 (ff.mul (as ff2 FF0) x3 x8)))
  (let ((let44 (as ff1 FF0)))
  (let ((let45 (ff.add let40 let41 let42 let43 let44)))
  (let ((let46 (= let45 (as ff0 FF0))))
  (let ((let47 (ff.mul (as ff2 FF0) x4 x7 x15)))
  (let ((let48 (ff.mul (as ff2 FF0) x8 x8 x15)))
  (let ((let49 (ff.mul x5 x13)))
  (let ((let50 (as ff2 FF0)))
  (let ((let51 (ff.add let47 let48 let49 let50)))
  (let ((let52 (= let51 (as ff0 FF0))))
  (let ((let53 (ff.mul x2 x11 x12)))
  (let ((let54 (ff.mul x5 x7 x13)))
  (let ((let55 (ff.mul (as ff2 FF0) x2 x10 x14)))
  (let ((let56 (ff.mul (as ff2 FF0) x3 x6)))
  (let ((let57 (ff.add let53 let54 let55 let56)))
  (let ((let58 (= let57 (as ff0 FF0))))
  (let ((let59 (ff.mul x1 x2 x8)))
  (let ((let60 (ff.mul (as ff2 FF0) x0 x1 x13)))
  (let ((let61 (ff.mul x8 x12 x15)))
  (let ((let62 (ff.add let59 let60 let61)))
  (let ((let63 (= let62 (as ff0 FF0))))
  (let ((let64 (ff.mul x0 x4 x13)))
  (let ((let65 (ff.mul x2 x7 x14)))
  (let ((let66 (ff.add let64 let65)))
  (let ((let67 (= let66 (as ff0 FF0))))
  (let ((let68 (ff.mul (as ff2 FF0) x2 x4 x9)))
  (let ((let69 (ff.mul (as ff2 FF0) x3 x8 x12)))
  (let ((let70 (ff.add let68 let69)))
  (let ((let71 (= let70 (as ff0 FF0))))
  (let ((let72 (ff.mul x4 x4 x8)))
  (let ((let73 (ff.mul x0 x4 x11)))
  (let ((let74 (ff.mul x0 x1 x12)))
  (let ((let75 (ff.mul x10 x10 x14)))
  (let ((let76 (ff.add let72 let73 let74 let75)))
  (let ((let77 (= let76 (as ff0 FF0))))
  (let ((let78 (ff.mul x5 x5 x9)))
  (let ((let79 (ff.mul (as ff2 FF0) x10 x10 x11)))
  (let ((let80 (ff.mul (as ff2 FF0) x1 x6 x14)))
  (let ((let81 (ff.add let78 let79 let80)))
  (let ((let82 (= let81 (as ff0 FF0))))
  (let ((let83 (ff.mul x7 x10 x11)))
  (let ((let84 (ff.mul x10 x11 x12)))
  (let ((let85 (ff.mul x0 x8)))
  (let ((let86 (ff.mul (as ff2 FF0) x10)))
  (let ((let87 (as ff1 FF0)))
  (let ((let88 (ff.add let83 let84 let85 let86 let87)))
  (let ((let89 (= let88 (as ff0 FF0))))
  (let ((let90 (and let6 let12 let16 let22 let29 let33 let39 let46 let52 let58 let63 let67 let71 let77 let82 let89)))
  let90
)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
)
(check-sat)
