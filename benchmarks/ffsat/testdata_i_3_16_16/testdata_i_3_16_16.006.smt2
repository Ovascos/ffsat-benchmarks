
(set-info :smt-lib-version 2.6)
(set-logic QF_FFA)
(define-sort FF0 () (_ FiniteField 3))
(declare-fun x0 () FF0)
(declare-fun x1 () FF0)
(declare-fun x2 () FF0)
(declare-fun x3 () FF0)
(declare-fun x4 () FF0)
(declare-fun x5 () FF0)
(declare-fun x6 () FF0)
(declare-fun x7 () FF0)
(declare-fun x8 () FF0)
(declare-fun x9 () FF0)
(declare-fun x10 () FF0)
(declare-fun x11 () FF0)
(declare-fun x12 () FF0)
(declare-fun x13 () FF0)
(declare-fun x14 () FF0)
(declare-fun x15 () FF0)
(assert
  (let ((let0 (ff.mul x4 x4 x7)))
  (let ((let1 (ff.mul x1 x1 x9)))
  (let ((let2 (ff.mul (as ff2 FF0) x6 x9 x13)))
  (let ((let3 (ff.mul x0 x7)))
  (let ((let4 (ff.add let0 let1 let2 let3)))
  (let ((let5 (= let4 (as ff0 FF0))))
  (let ((let6 (ff.mul (as ff2 FF0) x0 x3 x7)))
  (let ((let7 (ff.mul (as ff2 FF0) x8 x12 x13)))
  (let ((let8 (ff.mul (as ff2 FF0) x8 x13 x13)))
  (let ((let9 (ff.add let6 let7 let8)))
  (let ((let10 (= let9 (as ff0 FF0))))
  (let ((let11 (ff.mul x0 x1 x5)))
  (let ((let12 (ff.mul x5 x8 x12)))
  (let ((let13 (as ff2 FF0)))
  (let ((let14 (ff.add let11 let12 let13)))
  (let ((let15 (= let14 (as ff0 FF0))))
  (let ((let16 (ff.mul x2 x9 x13)))
  (let ((let17 (ff.mul (as ff2 FF0) x2 x11 x13)))
  (let ((let18 (ff.add let16 let17)))
  (let ((let19 (= let18 (as ff0 FF0))))
  (let ((let20 (ff.mul (as ff2 FF0) x2 x2 x7)))
  (let ((let21 (ff.mul (as ff2 FF0) x2 x7 x9)))
  (let ((let22 (ff.mul x0 x10 x11)))
  (let ((let23 (ff.mul x9 x13 x13)))
  (let ((let24 (ff.add let20 let21 let22 let23)))
  (let ((let25 (= let24 (as ff0 FF0))))
  (let ((let26 (ff.mul (as ff2 FF0) x2 x4 x5)))
  (let ((let27 (ff.mul (as ff2 FF0) x6 x6 x7)))
  (let ((let28 (ff.mul (as ff2 FF0) x3 x7 x10)))
  (let ((let29 (ff.mul (as ff2 FF0) x3 x4 x13)))
  (let ((let30 (ff.mul x1 x6 x13)))
  (let ((let31 (ff.add let26 let27 let28 let29 let30)))
  (let ((let32 (= let31 (as ff0 FF0))))
  (let ((let33 (ff.mul (as ff2 FF0) x4 x4 x6)))
  (let ((let34 (ff.mul x1 x2 x7)))
  (let ((let35 (ff.mul x6 x12 x13)))
  (let ((let36 (ff.mul (as ff2 FF0) x4 x12 x15)))
  (let ((let37 (as ff2 FF0)))
  (let ((let38 (ff.add let33 let34 let35 let36 let37)))
  (let ((let39 (= let38 (as ff0 FF0))))
  (let ((let40 (ff.mul (as ff2 FF0) x0 x0 x7)))
  (let ((let41 (ff.mul (as ff2 FF0) x6 x6 x10)))
  (let ((let42 (ff.mul (as ff2 FF0) x2 x7 x11)))
  (let ((let43 (ff.mul x1 x4 x12)))
  (let ((let44 (ff.add let40 let41 let42 let43)))
  (let ((let45 (= let44 (as ff0 FF0))))
  (let ((let46 (ff.mul x4 x9 x10)))
  (let ((let47 (ff.mul x1 x7 x11)))
  (let ((let48 (ff.mul x7 x9 x13)))
  (let ((let49 (ff.mul x3 x13 x14)))
  (let ((let50 (ff.mul (as ff2 FF0) x8 x13 x14)))
  (let ((let51 (as ff1 FF0)))
  (let ((let52 (ff.add let46 let47 let48 let49 let50 let51)))
  (let ((let53 (= let52 (as ff0 FF0))))
  (let ((let54 (ff.mul (as ff2 FF0) x1 x2 x5)))
  (let ((let55 (ff.mul x3 x4 x14)))
  (let ((let56 (ff.mul x5 x14 x14)))
  (let ((let57 (ff.add let54 let55 let56)))
  (let ((let58 (= let57 (as ff0 FF0))))
  (let ((let59 (ff.mul x0 x7 x12)))
  (let ((let60 (ff.mul (as ff2 FF0) x0 x14 x14)))
  (let ((let61 (as ff1 FF0)))
  (let ((let62 (ff.add let59 let60 let61)))
  (let ((let63 (= let62 (as ff0 FF0))))
  (let ((let64 (ff.mul (as ff2 FF0) x1 x3 x9)))
  (let ((let65 (ff.mul x4 x7 x12)))
  (let ((let66 (ff.mul (as ff2 FF0) x4 x13 x14)))
  (let ((let67 (ff.add let64 let65 let66)))
  (let ((let68 (= let67 (as ff0 FF0))))
  (let ((let69 (ff.mul x13 x14 x15)))
  (let ((let70 (ff.mul x4 x5)))
  (let ((let71 (ff.add let69 let70)))
  (let ((let72 (= let71 (as ff0 FF0))))
  (let ((let73 (ff.mul x3 x3 x6)))
  (let ((let74 (ff.mul (as ff2 FF0) x3 x6 x6)))
  (let ((let75 (ff.mul x5 x6 x7)))
  (let ((let76 (ff.mul (as ff2 FF0) x5 x14 x15)))
  (let ((let77 (ff.add let73 let74 let75 let76)))
  (let ((let78 (= let77 (as ff0 FF0))))
  (let ((let79 (ff.mul x3 x8 x10)))
  (let ((let80 (ff.mul x0 x8 x11)))
  (let ((let81 (ff.mul x3 x6 x14)))
  (let ((let82 (ff.mul (as ff2 FF0) x13 x13)))
  (let ((let83 (ff.add let79 let80 let81 let82)))
  (let ((let84 (= let83 (as ff0 FF0))))
  (let ((let85 (ff.mul x0 x10 x11)))
  (let ((let86 (ff.mul (as ff2 FF0) x7 x10 x15)))
  (let ((let87 (ff.add let85 let86)))
  (let ((let88 (= let87 (as ff0 FF0))))
  (let ((let89 (and let5 let10 let15 let19 let25 let32 let39 let45 let53 let58 let63 let68 let72 let78 let84 let88)))
  let89
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
)
(check-sat)
