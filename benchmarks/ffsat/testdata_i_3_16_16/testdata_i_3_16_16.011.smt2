
(set-info :smt-lib-version 2.6)
(set-logic QF_FF)
(define-sort FF0 () (_ FiniteField 3))
(declare-fun x0 () FF0)
(declare-fun x1 () FF0)
(declare-fun x2 () FF0)
(declare-fun x3 () FF0)
(declare-fun x4 () FF0)
(declare-fun x5 () FF0)
(declare-fun x6 () FF0)
(declare-fun x7 () FF0)
(declare-fun x8 () FF0)
(declare-fun x9 () FF0)
(declare-fun x10 () FF0)
(declare-fun x11 () FF0)
(declare-fun x12 () FF0)
(declare-fun x13 () FF0)
(declare-fun x14 () FF0)
(declare-fun x15 () FF0)
(assert
  (let ((let0 (ff.mul (as ff2 FF0) x1 x1 x10)))
  (let ((let1 (ff.mul x0 x10 x11)))
  (let ((let2 (as ff2 FF0)))
  (let ((let3 (ff.add let0 let1 let2)))
  (let ((let4 (= let3 (as ff0 FF0))))
  (let ((let5 (ff.mul x7 x10 x10)))
  (let ((let6 (ff.mul (as ff2 FF0) x5 x7 x11)))
  (let ((let7 (ff.mul x0 x10 x12)))
  (let ((let8 (ff.mul x3 x9 x15)))
  (let ((let9 (ff.add let5 let6 let7 let8)))
  (let ((let10 (= let9 (as ff0 FF0))))
  (let ((let11 (ff.mul x4 x6 x6)))
  (let ((let12 (ff.mul (as ff2 FF0) x7 x8 x8)))
  (let ((let13 (ff.add let11 let12)))
  (let ((let14 (= let13 (as ff0 FF0))))
  (let ((let15 (ff.mul x3 x8 x11)))
  (let ((let16 (ff.mul x11 x11 x11)))
  (let ((let17 (ff.mul x3 x13 x13)))
  (let ((let18 (ff.add let15 let16 let17)))
  (let ((let19 (= let18 (as ff0 FF0))))
  (let ((let20 (ff.mul x0 x4 x4)))
  (let ((let21 (ff.mul x3 x11 x13)))
  (let ((let22 (ff.mul (as ff2 FF0) x9 x15 x15)))
  (let ((let23 (ff.add let20 let21 let22)))
  (let ((let24 (= let23 (as ff0 FF0))))
  (let ((let25 (ff.mul (as ff2 FF0) x2 x2 x7)))
  (let ((let26 (ff.mul x2 x10 x12)))
  (let ((let27 (ff.mul (as ff2 FF0) x3 x4 x15)))
  (let ((let28 (ff.add let25 let26 let27)))
  (let ((let29 (= let28 (as ff0 FF0))))
  (let ((let30 (ff.mul (as ff2 FF0) x0 x2 x6)))
  (let ((let31 (ff.mul x1 x3 x7)))
  (let ((let32 (ff.mul (as ff2 FF0) x7 x7 x12)))
  (let ((let33 (ff.mul x5 x14 x14)))
  (let ((let34 (ff.add let30 let31 let32 let33)))
  (let ((let35 (= let34 (as ff0 FF0))))
  (let ((let36 (ff.mul x1 x6 x6)))
  (let ((let37 (ff.mul (as ff2 FF0) x0 x8 x8)))
  (let ((let38 (ff.mul x5 x10 x12)))
  (let ((let39 (ff.mul (as ff2 FF0) x0 x9)))
  (let ((let40 (as ff1 FF0)))
  (let ((let41 (ff.add let36 let37 let38 let39 let40)))
  (let ((let42 (= let41 (as ff0 FF0))))
  (let ((let43 (ff.mul x0 x10 x10)))
  (let ((let44 (ff.mul (as ff2 FF0) x2 x7 x11)))
  (let ((let45 (ff.mul (as ff2 FF0) x4 x10 x14)))
  (let ((let46 (ff.mul (as ff2 FF0) x0 x11 x15)))
  (let ((let47 (ff.mul (as ff2 FF0) x10 x15 x15)))
  (let ((let48 (ff.add let43 let44 let45 let46 let47)))
  (let ((let49 (= let48 (as ff0 FF0))))
  (let ((let50 (ff.mul x0 x8 x8)))
  (let ((let51 (ff.mul (as ff2 FF0) x1 x2 x13)))
  (let ((let52 (ff.mul (as ff2 FF0) x1 x8 x13)))
  (let ((let53 (ff.mul x1 x1)))
  (let ((let54 (ff.add let50 let51 let52 let53)))
  (let ((let55 (= let54 (as ff0 FF0))))
  (let ((let56 (ff.mul x6 x9 x11)))
  (let ((let57 (ff.mul x3 x4 x13)))
  (let ((let58 (ff.mul (as ff2 FF0) x1 x13 x13)))
  (let ((let59 (ff.add let56 let57 let58)))
  (let ((let60 (= let59 (as ff0 FF0))))
  (let ((let61 (ff.mul (as ff2 FF0) x3 x10 x10)))
  (let ((let62 (ff.mul x0 x10 x11)))
  (let ((let63 (ff.mul x11 x15 x15)))
  (let ((let64 (ff.mul x3 x4)))
  (let ((let65 (ff.add let61 let62 let63 let64)))
  (let ((let66 (= let65 (as ff0 FF0))))
  (let ((let67 (ff.mul x3 x11 x14)))
  (let ((let68 (ff.mul (as ff2 FF0) x1 x13 x14)))
  (let ((let69 (ff.mul x10 x11 x15)))
  (let ((let70 (ff.mul x1 x9)))
  (let ((let71 (ff.add let67 let68 let69 let70)))
  (let ((let72 (= let71 (as ff0 FF0))))
  (let ((let73 (ff.mul (as ff2 FF0) x2 x3 x6)))
  (let ((let74 (ff.mul x1 x13 x13)))
  (let ((let75 (ff.mul x12 x13 x14)))
  (let ((let76 (ff.mul (as ff2 FF0) x3 x7 x15)))
  (let ((let77 (ff.add let73 let74 let75 let76)))
  (let ((let78 (= let77 (as ff0 FF0))))
  (let ((let79 (ff.mul (as ff2 FF0) x5 x8 x10)))
  (let ((let80 (ff.mul x7 x10 x10)))
  (let ((let81 (ff.mul x6 x15 x15)))
  (let ((let82 (ff.add let79 let80 let81)))
  (let ((let83 (= let82 (as ff0 FF0))))
  (let ((let84 (ff.mul x0 x3 x3)))
  (let ((let85 (ff.mul (as ff2 FF0) x2 x6 x6)))
  (let ((let86 (ff.mul (as ff2 FF0) x4 x14 x14)))
  (let ((let87 (ff.mul (as ff2 FF0) x6)))
  (let ((let88 (ff.add let84 let85 let86 let87)))
  (let ((let89 (= let88 (as ff0 FF0))))
  (let ((let90 (and let4 let10 let14 let19 let24 let29 let35 let42 let49 let55 let60 let66 let72 let78 let83 let89)))
  let90
)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
)
(check-sat)
